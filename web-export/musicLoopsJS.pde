Maxim maxim;
//for the images
PImage knobBase;
PImage knob;
PImage knobPressed;

//for the position of the knobs
float knob1x;
float knob2x;
float knob3x;

float knob1y;
float knob2y;
float knob3y;

//
float speedAdjust1= 1.0;
float speedAdjust2= 1.0;
float speedAdjust3= 1.0;
float knobBaseHeight;
float knobBasePosY;
float limitSup;
float limitInf;

//initializing audios

AudioPlayer player1;
AudioPlayer player2;
AudioPlayer player3;
//power is the volume of the beat
float power1=0;
boolean playit1= false;
float power2=0;
boolean playit2=false;
float power3=0;
boolean playit3=false;
//colors
int r, g, b, alpha;
//to save the position of the circles
float antX, antY;

//for the color of the bg
float bgR, bgG, bgB = 0;


void setup()
{
  frameRate(25);
  //audio1
  maxim = new Maxim(this);
  player1 = maxim.loadFile("bass-loop.wav");
  player1.setLooping(true);
  player1.setAnalysing(true);
  //audio2
  player2= maxim.loadFile("conga-loop.wav");
  player2.setLooping(true);
  player2.setAnalysing(true);
  //audio3
  player3= maxim.loadFile("funk-guitar.wav");
  player3.setLooping(true);
  player3.setAnalysing(true);
  
  size(640, 960);
  imageMode(CENTER);
  background(0);
  //call the images
  knobBase = loadImage("knobBase.png");
  knob = loadImage("knob.png");
  knobPressed = loadImage("knobPressed.png");
  background(0);
  // initialize variables of position
  knob1y= height-107;
  knob2y= height-107;
  knob3y= height-107;
  //first knob
  knob1x=148;
  //second knob
  knob2x= width/2;
  //third knob
  knob3x= width-150;
  knobBasePosY=height-270;
  knobBaseHeight = knobBase.height;
  limitSup= 525;
  limitInf= knob1y;



}

void draw()
{
  //rectangle to simulate fading
  rectMode(CENTER);
  fill(255,50);
  noStroke();
  rect(width/2, height/2, width, height);
    
  //speed of the players
  player1.speed(speedAdjust1);
  player2.speed(speedAdjust2);
  player3.speed(speedAdjust3);
  
  //---GRAPHICS GENERATED BY THE PLAYERS---//
  
   //graphics for the player2 (lines)
  if (playit2){
   
   player2.play();
   //analiza el average power
   power2 = player2.getAveragePower();
   //println(power);
   //random color with input from the sound
   r= int(random(150,250)*(power2*10));
   g= int(random(150,200)*(power2*10));
   b= int(random(100,250)*(power2*10));
   alpha= int(random(0,100)*(power2*50));
   for(int i=0; i<=100 ; i++){
     stroke(r*random(255),g*random(255),b*random(255));
     strokeWeight(1);
     line(i*power2*500,sin(power2*i)*1000*i,(power2*100*i)*(sin(power2*i*i)), (power2*100*i)*(sin(power2*i))/i);
   }  
 }
 //graphics for the player 3 (squares)
  if (playit3){
   
   player3.play();
   //analiza el average power3
   power3 = player3.getAveragePower();
   //println(power3);
   //random color with input from the sound
   r= int(random(100,255)*(power3*10));
   g= int(random(150,200)*(power3*10));
   b= int(random(150,255)*(power3*10));
   alpha= int(random(0,10)*(power3*50));
   fill(r,g,b,10000*power3);
   stroke(b,r,g, 100);
   strokeWeight(1);
   for(int i=0; i<=width/4 ; i++){
     pushMatrix();
     //translate(width/2, height/2);รง
     translate(width/(power3*20*i), i*(height*power3));
     rotate(i*power3*10);
     rect(i*(width*power3), height/i, i*power3*50, i*power3*50);
     popMatrix();
   }  
 }
 
  //graphics for the player1 (spiral)
  if(playit1){
    player1.play();
    power1 = player1.getAveragePower();
    //random color with input from the sound
   r= int(random(0,180)*(power1*50));
   g= int(random(120,200)*(power1*50));
   b= int(random(0,200)*(power1*50));
   alpha= int(random(100,255)*(power1*100));
   //strokeWeight(1);
   //stroke(r,g,b);
   noStroke();
   //fill(r, g, b, 5);
   for(int i=width; i>=0 ; i--){
     fill(255*i, i*power1*10, 20*i*power1, i/100);
     pushMatrix();
     translate((width/2)+power1*10, (height/2)+power1*10);
     rotate(i*power1);
     rect(i*power1*10, i*power1*10, i*power1*5, i*power1*5);
     popMatrix();
   }
  }
  

  
  /////first knob
  image(knobBase, 150,knobBasePosY);
  image(knob, knob1x, knob1y);
  //image(knobPressed, 148, height-107);
  /////second knob
  image(knobBase, width/2,height-270);
  image(knob, knob2x,knob2y);
  //image(knobPressed, knob2x,knob2y);
  /////third knob
  image(knobBase, width-150,height-270);
  image(knob, knob3x, knob3y);
  //image(knobPressed, knob3x, knob3y);
  
  
}

void mouseDragged()
{
  //drag first knob
  if(dist(mouseX, mouseY,knob1x,knob1y)<knob.width/2){
    playit1=true;
    image(knobPressed, 148, knob1y);
    knob1y=mouseY;
    player1.play();
    //modify the spees according to the height of the knob
    speedAdjust1=map(knob1y,limitSup,limitInf,1.7,0.5);
    
  }
  //limit the vertical displacement of the knob 1, and stops the sound in the inferior limit
  if(knob1y>=limitInf){
      knob1y=limitInf;
      player1.stop();
      playit1=false;
    } else if(knob1y<=limitSup){
      knob1y=limitSup;
      
    }
    
   //drag second knob
  if(dist(mouseX, mouseY,knob2x,knob2y)<knob.width/2){
    image(knobPressed, knob2x, knob2y);
    playit2=true;
    knob2y=mouseY;
    player2.play();
    speedAdjust2=map(knob2y,limitSup,limitInf,1.7,0.5);
  }
  //limit the vertical displacement of the knob 2
  if(knob2y>=limitInf){
      knob2y=limitInf;
      playit2= false;
      player2.stop();
    } else if(knob2y<=limitSup){
      knob2y=limitSup;
    }
    
    //drag third knob
  if(dist(mouseX, mouseY,knob3x,knob3y)<knob.width/2){
    image(knobPressed, knob3x, knob3y);
    playit3=true;
    knob3y=mouseY;
    player3.play();
    speedAdjust3=map(knob3y,limitSup,limitInf,1.7,0.5);
  }
  //limit the vertical displacement of the knob 2
  if(knob3y>=limitInf){
      knob3y=limitInf;
      playit3= false;
      player3.stop();
    } else if(knob3y<=limitSup){
      knob3y=limitSup;
    }
  
}

void mousePressed()
{

}

void mouseReleased()
{

}


